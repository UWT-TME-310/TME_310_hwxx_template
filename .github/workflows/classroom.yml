name: TME 310 Autograding

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest nbconvert
    
    - name: Convert notebook to Python script
      run: |
        jupyter nbconvert --to script assignment.ipynb --output assignment_extracted
        echo "✓ Notebook converted to Python script"
    
    - name: Test notebook execution
      run: |
        jupyter nbconvert --to notebook --execute assignment.ipynb --output assignment_executed.ipynb
        echo "✓ Notebook executes without errors"
    
    - name: Extract functions for testing
      run: |
        python -c "
        import json
        import nbformat
        import ast
        
        # Read the notebook
        with open('assignment.ipynb', 'r') as f:
            nb = nbformat.read(f, as_version=4)
        
        # Extract all code
        all_code = []
        for cell in nb.cells:
            if cell.cell_type == 'code':
                all_code.append(cell.source)
        
        # Write extracted code to a Python file for testing
        with open('extracted_functions.py', 'w') as f:
            f.write('# Extracted from assignment.ipynb\n\n')
            for code in all_code:
                if code.strip() and not code.strip().startswith('%'):
                    f.write(code + '\n\n')
        
        print('✓ Functions extracted for testing')
        "
    
    - name: Run basic functionality tests
      run: |
        python -c "
        import sys
        import importlib.util
        
        # Try to import the extracted functions
        try:
            spec = importlib.util.spec_from_file_location('student_work', 'extracted_functions.py')
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            print('✓ Code imports and executes successfully')
        except Exception as e:
            print(f'⚠ Import warning: {e}')
            # Don't fail the test for import issues - student might have valid notebook
        
        # Check for required elements in the original Python script
        with open('assignment_extracted.py', 'r') as f:
            content = f.read()
        
        checks = [
            ('numpy import', 'import numpy' in content or 'import np' in content),
            ('matplotlib import', 'import matplotlib' in content or 'import plt' in content),
            ('function definition', 'def ' in content),
            ('validation content', 'validate' in content.lower() or 'check' in content.lower()),
        ]
        
        for check_name, passed in checks:
            if passed:
                print(f'✓ {check_name} found')
            else:
                print(f'⚠ {check_name} missing (recommended but not required)')
        
        print('✓ Basic requirements check complete')
        "
    
    - name: Check assignment completeness
      run: |
        python -c "
        import json
        import nbformat
        
        # Read notebook and check for student content
        with open('assignment.ipynb', 'r') as f:
            nb = nbformat.read(f, as_version=4)
        
        code_cells = [cell for cell in nb.cells if cell.cell_type == 'code']
        non_empty_code_cells = [cell for cell in code_cells if cell.source.strip() and not cell.source.strip().startswith('#')]
        
        print(f'Total code cells: {len(code_cells)}')
        print(f'Non-empty code cells: {len(non_empty_code_cells)}')
        
        if len(non_empty_code_cells) >= 2:
            print('✓ Assignment appears to have student work')
        else:
            print('⚠ Assignment may be incomplete - very little code found')
        
        # Check for reflection content
        markdown_cells = [cell for cell in nb.cells if cell.cell_type == 'markdown']
        reflection_found = any('reflection' in cell.source.lower() or 'answer here' not in cell.source.lower() 
                              for cell in markdown_cells)
        
        if reflection_found:
            print('✓ Reflection content appears to be completed')
        else:
            print('⚠ Reflection section may be incomplete')
        "